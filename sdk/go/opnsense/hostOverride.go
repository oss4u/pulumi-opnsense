// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opnsense

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type HostOverride struct {
	pulumi.CustomResourceState

	Length pulumi.IntOutput    `pulumi:"length"`
	Result pulumi.StringOutput `pulumi:"result"`
}

// NewHostOverride registers a new resource with the given unique name, arguments, and options.
func NewHostOverride(ctx *pulumi.Context,
	name string, args *HostOverrideArgs, opts ...pulumi.ResourceOption) (*HostOverride, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Length == nil {
		return nil, errors.New("invalid value for required argument 'Length'")
	}
	var resource HostOverride
	err := ctx.RegisterResource("opnsense:index:HostOverride", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostOverride gets an existing HostOverride resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostOverride(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostOverrideState, opts ...pulumi.ResourceOption) (*HostOverride, error) {
	var resource HostOverride
	err := ctx.ReadResource("opnsense:index:HostOverride", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HostOverride resources.
type hostOverrideState struct {
}

type HostOverrideState struct {
}

func (HostOverrideState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostOverrideState)(nil)).Elem()
}

type hostOverrideArgs struct {
	Length int `pulumi:"length"`
}

// The set of arguments for constructing a HostOverride resource.
type HostOverrideArgs struct {
	Length pulumi.IntInput
}

func (HostOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostOverrideArgs)(nil)).Elem()
}

type HostOverrideInput interface {
	pulumi.Input

	ToHostOverrideOutput() HostOverrideOutput
	ToHostOverrideOutputWithContext(ctx context.Context) HostOverrideOutput
}

func (*HostOverride) ElementType() reflect.Type {
	return reflect.TypeOf((**HostOverride)(nil)).Elem()
}

func (i *HostOverride) ToHostOverrideOutput() HostOverrideOutput {
	return i.ToHostOverrideOutputWithContext(context.Background())
}

func (i *HostOverride) ToHostOverrideOutputWithContext(ctx context.Context) HostOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostOverrideOutput)
}

type HostOverrideOutput struct{ *pulumi.OutputState }

func (HostOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostOverride)(nil)).Elem()
}

func (o HostOverrideOutput) ToHostOverrideOutput() HostOverrideOutput {
	return o
}

func (o HostOverrideOutput) ToHostOverrideOutputWithContext(ctx context.Context) HostOverrideOutput {
	return o
}

func (o HostOverrideOutput) Length() pulumi.IntOutput {
	return o.ApplyT(func(v *HostOverride) pulumi.IntOutput { return v.Length }).(pulumi.IntOutput)
}

func (o HostOverrideOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v *HostOverride) pulumi.StringOutput { return v.Result }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostOverrideInput)(nil)).Elem(), &HostOverride{})
	pulumi.RegisterOutputType(HostOverrideOutput{})
}
