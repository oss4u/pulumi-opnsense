// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package unbound

import (
	"context"
	"reflect"

	"errors"
	"github.com/oss4u/pulumi-opnsense-native/sdk/go/opnsense/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type HostAlias struct {
	pulumi.CustomResourceState

	Length pulumi.IntOutput    `pulumi:"length"`
	Result pulumi.StringOutput `pulumi:"result"`
}

// NewHostAlias registers a new resource with the given unique name, arguments, and options.
func NewHostAlias(ctx *pulumi.Context,
	name string, args *HostAliasArgs, opts ...pulumi.ResourceOption) (*HostAlias, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Length == nil {
		return nil, errors.New("invalid value for required argument 'Length'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HostAlias
	err := ctx.RegisterResource("opnsense:unbound:HostAlias", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostAlias gets an existing HostAlias resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostAlias(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostAliasState, opts ...pulumi.ResourceOption) (*HostAlias, error) {
	var resource HostAlias
	err := ctx.ReadResource("opnsense:unbound:HostAlias", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HostAlias resources.
type hostAliasState struct {
}

type HostAliasState struct {
}

func (HostAliasState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostAliasState)(nil)).Elem()
}

type hostAliasArgs struct {
	Length int `pulumi:"length"`
}

// The set of arguments for constructing a HostAlias resource.
type HostAliasArgs struct {
	Length pulumi.IntInput
}

func (HostAliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostAliasArgs)(nil)).Elem()
}

type HostAliasInput interface {
	pulumi.Input

	ToHostAliasOutput() HostAliasOutput
	ToHostAliasOutputWithContext(ctx context.Context) HostAliasOutput
}

func (*HostAlias) ElementType() reflect.Type {
	return reflect.TypeOf((**HostAlias)(nil)).Elem()
}

func (i *HostAlias) ToHostAliasOutput() HostAliasOutput {
	return i.ToHostAliasOutputWithContext(context.Background())
}

func (i *HostAlias) ToHostAliasOutputWithContext(ctx context.Context) HostAliasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostAliasOutput)
}

// HostAliasArrayInput is an input type that accepts HostAliasArray and HostAliasArrayOutput values.
// You can construct a concrete instance of `HostAliasArrayInput` via:
//
//	HostAliasArray{ HostAliasArgs{...} }
type HostAliasArrayInput interface {
	pulumi.Input

	ToHostAliasArrayOutput() HostAliasArrayOutput
	ToHostAliasArrayOutputWithContext(context.Context) HostAliasArrayOutput
}

type HostAliasArray []HostAliasInput

func (HostAliasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostAlias)(nil)).Elem()
}

func (i HostAliasArray) ToHostAliasArrayOutput() HostAliasArrayOutput {
	return i.ToHostAliasArrayOutputWithContext(context.Background())
}

func (i HostAliasArray) ToHostAliasArrayOutputWithContext(ctx context.Context) HostAliasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostAliasArrayOutput)
}

// HostAliasMapInput is an input type that accepts HostAliasMap and HostAliasMapOutput values.
// You can construct a concrete instance of `HostAliasMapInput` via:
//
//	HostAliasMap{ "key": HostAliasArgs{...} }
type HostAliasMapInput interface {
	pulumi.Input

	ToHostAliasMapOutput() HostAliasMapOutput
	ToHostAliasMapOutputWithContext(context.Context) HostAliasMapOutput
}

type HostAliasMap map[string]HostAliasInput

func (HostAliasMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostAlias)(nil)).Elem()
}

func (i HostAliasMap) ToHostAliasMapOutput() HostAliasMapOutput {
	return i.ToHostAliasMapOutputWithContext(context.Background())
}

func (i HostAliasMap) ToHostAliasMapOutputWithContext(ctx context.Context) HostAliasMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostAliasMapOutput)
}

type HostAliasOutput struct{ *pulumi.OutputState }

func (HostAliasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostAlias)(nil)).Elem()
}

func (o HostAliasOutput) ToHostAliasOutput() HostAliasOutput {
	return o
}

func (o HostAliasOutput) ToHostAliasOutputWithContext(ctx context.Context) HostAliasOutput {
	return o
}

func (o HostAliasOutput) Length() pulumi.IntOutput {
	return o.ApplyT(func(v *HostAlias) pulumi.IntOutput { return v.Length }).(pulumi.IntOutput)
}

func (o HostAliasOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v *HostAlias) pulumi.StringOutput { return v.Result }).(pulumi.StringOutput)
}

type HostAliasArrayOutput struct{ *pulumi.OutputState }

func (HostAliasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostAlias)(nil)).Elem()
}

func (o HostAliasArrayOutput) ToHostAliasArrayOutput() HostAliasArrayOutput {
	return o
}

func (o HostAliasArrayOutput) ToHostAliasArrayOutputWithContext(ctx context.Context) HostAliasArrayOutput {
	return o
}

func (o HostAliasArrayOutput) Index(i pulumi.IntInput) HostAliasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HostAlias {
		return vs[0].([]*HostAlias)[vs[1].(int)]
	}).(HostAliasOutput)
}

type HostAliasMapOutput struct{ *pulumi.OutputState }

func (HostAliasMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostAlias)(nil)).Elem()
}

func (o HostAliasMapOutput) ToHostAliasMapOutput() HostAliasMapOutput {
	return o
}

func (o HostAliasMapOutput) ToHostAliasMapOutputWithContext(ctx context.Context) HostAliasMapOutput {
	return o
}

func (o HostAliasMapOutput) MapIndex(k pulumi.StringInput) HostAliasOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HostAlias {
		return vs[0].(map[string]*HostAlias)[vs[1].(string)]
	}).(HostAliasOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostAliasInput)(nil)).Elem(), &HostAlias{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostAliasArrayInput)(nil)).Elem(), HostAliasArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostAliasMapInput)(nil)).Elem(), HostAliasMap{})
	pulumi.RegisterOutputType(HostAliasOutput{})
	pulumi.RegisterOutputType(HostAliasArrayOutput{})
	pulumi.RegisterOutputType(HostAliasMapOutput{})
}
