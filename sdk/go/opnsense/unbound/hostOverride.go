// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package unbound

import (
	"context"
	"reflect"

	"errors"
	"example.com/pulumi-opnsense/sdk/go/opnsense/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type HostOverride struct {
	pulumi.CustomResourceState

	Description pulumi.StringOutput    `pulumi:"description"`
	Domain      pulumi.StringOutput    `pulumi:"domain"`
	Enabled     pulumi.BoolOutput      `pulumi:"enabled"`
	Hostname    pulumi.StringOutput    `pulumi:"hostname"`
	Mx          pulumi.StringPtrOutput `pulumi:"mx"`
	Mx_prio     pulumi.IntPtrOutput    `pulumi:"mx_prio"`
	Result      pulumi.StringOutput    `pulumi:"result"`
	Rr          pulumi.StringOutput    `pulumi:"rr"`
	Server      pulumi.StringPtrOutput `pulumi:"server"`
}

// NewHostOverride registers a new resource with the given unique name, arguments, and options.
func NewHostOverride(ctx *pulumi.Context,
	name string, args *HostOverrideArgs, opts ...pulumi.ResourceOption) (*HostOverride, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Hostname == nil {
		return nil, errors.New("invalid value for required argument 'Hostname'")
	}
	if args.Rr == nil {
		return nil, errors.New("invalid value for required argument 'Rr'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HostOverride
	err := ctx.RegisterResource("opnsense:unbound:HostOverride", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostOverride gets an existing HostOverride resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostOverride(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostOverrideState, opts ...pulumi.ResourceOption) (*HostOverride, error) {
	var resource HostOverride
	err := ctx.ReadResource("opnsense:unbound:HostOverride", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HostOverride resources.
type hostOverrideState struct {
}

type HostOverrideState struct {
}

func (HostOverrideState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostOverrideState)(nil)).Elem()
}

type hostOverrideArgs struct {
	Description string  `pulumi:"description"`
	Domain      string  `pulumi:"domain"`
	Enabled     bool    `pulumi:"enabled"`
	Hostname    string  `pulumi:"hostname"`
	Mx          *string `pulumi:"mx"`
	Mx_prio     *int    `pulumi:"mx_prio"`
	Rr          string  `pulumi:"rr"`
	Server      *string `pulumi:"server"`
}

// The set of arguments for constructing a HostOverride resource.
type HostOverrideArgs struct {
	Description pulumi.StringInput
	Domain      pulumi.StringInput
	Enabled     pulumi.BoolInput
	Hostname    pulumi.StringInput
	Mx          pulumi.StringPtrInput
	Mx_prio     pulumi.IntPtrInput
	Rr          pulumi.StringInput
	Server      pulumi.StringPtrInput
}

func (HostOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostOverrideArgs)(nil)).Elem()
}

type HostOverrideInput interface {
	pulumi.Input

	ToHostOverrideOutput() HostOverrideOutput
	ToHostOverrideOutputWithContext(ctx context.Context) HostOverrideOutput
}

func (*HostOverride) ElementType() reflect.Type {
	return reflect.TypeOf((**HostOverride)(nil)).Elem()
}

func (i *HostOverride) ToHostOverrideOutput() HostOverrideOutput {
	return i.ToHostOverrideOutputWithContext(context.Background())
}

func (i *HostOverride) ToHostOverrideOutputWithContext(ctx context.Context) HostOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostOverrideOutput)
}

type HostOverrideOutput struct{ *pulumi.OutputState }

func (HostOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostOverride)(nil)).Elem()
}

func (o HostOverrideOutput) ToHostOverrideOutput() HostOverrideOutput {
	return o
}

func (o HostOverrideOutput) ToHostOverrideOutputWithContext(ctx context.Context) HostOverrideOutput {
	return o
}

func (o HostOverrideOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *HostOverride) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o HostOverrideOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *HostOverride) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

func (o HostOverrideOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *HostOverride) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o HostOverrideOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *HostOverride) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

func (o HostOverrideOutput) Mx() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostOverride) pulumi.StringPtrOutput { return v.Mx }).(pulumi.StringPtrOutput)
}

func (o HostOverrideOutput) Mx_prio() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HostOverride) pulumi.IntPtrOutput { return v.Mx_prio }).(pulumi.IntPtrOutput)
}

func (o HostOverrideOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v *HostOverride) pulumi.StringOutput { return v.Result }).(pulumi.StringOutput)
}

func (o HostOverrideOutput) Rr() pulumi.StringOutput {
	return o.ApplyT(func(v *HostOverride) pulumi.StringOutput { return v.Rr }).(pulumi.StringOutput)
}

func (o HostOverrideOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostOverride) pulumi.StringPtrOutput { return v.Server }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostOverrideInput)(nil)).Elem(), &HostOverride{})
	pulumi.RegisterOutputType(HostOverrideOutput{})
}
