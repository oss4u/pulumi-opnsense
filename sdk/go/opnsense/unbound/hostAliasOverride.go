// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package unbound

import (
	"context"
	"reflect"

	"errors"
	"example.com/pulumi-opnsense/sdk/go/opnsense/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type HostAliasOverride struct {
	pulumi.CustomResourceState

	Description pulumi.StringOutput `pulumi:"description"`
	Domain      pulumi.StringOutput `pulumi:"domain"`
	Enabled     pulumi.BoolOutput   `pulumi:"enabled"`
	Host        pulumi.StringOutput `pulumi:"host"`
	Hostname    pulumi.StringOutput `pulumi:"hostname"`
	Result      pulumi.StringOutput `pulumi:"result"`
}

// NewHostAliasOverride registers a new resource with the given unique name, arguments, and options.
func NewHostAliasOverride(ctx *pulumi.Context,
	name string, args *HostAliasOverrideArgs, opts ...pulumi.ResourceOption) (*HostAliasOverride, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Host == nil {
		return nil, errors.New("invalid value for required argument 'Host'")
	}
	if args.Hostname == nil {
		return nil, errors.New("invalid value for required argument 'Hostname'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HostAliasOverride
	err := ctx.RegisterResource("opnsense:unbound:HostAliasOverride", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostAliasOverride gets an existing HostAliasOverride resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostAliasOverride(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostAliasOverrideState, opts ...pulumi.ResourceOption) (*HostAliasOverride, error) {
	var resource HostAliasOverride
	err := ctx.ReadResource("opnsense:unbound:HostAliasOverride", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HostAliasOverride resources.
type hostAliasOverrideState struct {
}

type HostAliasOverrideState struct {
}

func (HostAliasOverrideState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostAliasOverrideState)(nil)).Elem()
}

type hostAliasOverrideArgs struct {
	Description string `pulumi:"description"`
	Domain      string `pulumi:"domain"`
	Enabled     bool   `pulumi:"enabled"`
	Host        string `pulumi:"host"`
	Hostname    string `pulumi:"hostname"`
}

// The set of arguments for constructing a HostAliasOverride resource.
type HostAliasOverrideArgs struct {
	Description pulumi.StringInput
	Domain      pulumi.StringInput
	Enabled     pulumi.BoolInput
	Host        pulumi.StringInput
	Hostname    pulumi.StringInput
}

func (HostAliasOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostAliasOverrideArgs)(nil)).Elem()
}

type HostAliasOverrideInput interface {
	pulumi.Input

	ToHostAliasOverrideOutput() HostAliasOverrideOutput
	ToHostAliasOverrideOutputWithContext(ctx context.Context) HostAliasOverrideOutput
}

func (*HostAliasOverride) ElementType() reflect.Type {
	return reflect.TypeOf((**HostAliasOverride)(nil)).Elem()
}

func (i *HostAliasOverride) ToHostAliasOverrideOutput() HostAliasOverrideOutput {
	return i.ToHostAliasOverrideOutputWithContext(context.Background())
}

func (i *HostAliasOverride) ToHostAliasOverrideOutputWithContext(ctx context.Context) HostAliasOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostAliasOverrideOutput)
}

type HostAliasOverrideOutput struct{ *pulumi.OutputState }

func (HostAliasOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostAliasOverride)(nil)).Elem()
}

func (o HostAliasOverrideOutput) ToHostAliasOverrideOutput() HostAliasOverrideOutput {
	return o
}

func (o HostAliasOverrideOutput) ToHostAliasOverrideOutputWithContext(ctx context.Context) HostAliasOverrideOutput {
	return o
}

func (o HostAliasOverrideOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *HostAliasOverride) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o HostAliasOverrideOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *HostAliasOverride) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

func (o HostAliasOverrideOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *HostAliasOverride) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o HostAliasOverrideOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *HostAliasOverride) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

func (o HostAliasOverrideOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *HostAliasOverride) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

func (o HostAliasOverrideOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v *HostAliasOverride) pulumi.StringOutput { return v.Result }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostAliasOverrideInput)(nil)).Elem(), &HostAliasOverride{})
	pulumi.RegisterOutputType(HostAliasOverrideOutput{})
}
