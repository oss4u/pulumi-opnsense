// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'opnsense';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * The username. Its important but not secret.
     */
    public readonly fw_api_address!: pulumi.Output<string>;
    /**
     * The password. It is very secret.
     */
    public readonly fw_api_key!: pulumi.Output<string>;
    /**
     * The (entirely uncryptographic) hash function used to encode the "password".
     */
    public readonly fw_api_secret!: pulumi.Output<string>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            if ((!args || args.fw_api_address === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fw_api_address'");
            }
            if ((!args || args.fw_api_key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fw_api_key'");
            }
            if ((!args || args.fw_api_secret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fw_api_secret'");
            }
            resourceInputs["fw_api_address"] = args?.fw_api_address ? pulumi.secret(args.fw_api_address) : undefined;
            resourceInputs["fw_api_key"] = args?.fw_api_key ? pulumi.secret(args.fw_api_key) : undefined;
            resourceInputs["fw_api_secret"] = args?.fw_api_secret ? pulumi.secret(args.fw_api_secret) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["fw_api_address", "fw_api_key", "fw_api_secret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Provider.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * The username. Its important but not secret.
     */
    fw_api_address: pulumi.Input<string>;
    /**
     * The password. It is very secret.
     */
    fw_api_key: pulumi.Input<string>;
    /**
     * The (entirely uncryptographic) hash function used to encode the "password".
     */
    fw_api_secret: pulumi.Input<string>;
}
